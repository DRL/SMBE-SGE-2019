initialize() {
	
	defineConstant('seqLength', 32e3);
	defineConstant("migration", 3.8866e-8);
	defineConstant("mutation_rate", 1.9e-6);
	defineConstant('recombination_rate', 1.15e-5);
	defineConstant('sample_size', 20);

	defineConstant('Nep0', 2324);
	defineConstant('Nep1', 989);
	defineConstant('start_frequency', 0.1);

	initializeMutationRate(0.0);
	initializeRecombinationRate(1.84675e-5);
	
	
	// m1 mutation = mutation under divergent selection
	initializeMutationType("m1", 0.5, "f", 0.01);  //neutral muitations
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, asInteger(seqLength));
	
	//set working directory
	setwd("/Users/s1854903/sims/output/test");
	initializeTreeSeq();
	
}


1 late() {
	//initialize population with Ne_ancestral = Nep0
	sim.addSubpop("p0", Nep0);
	//add mutation under divergent selection at a certain starting frequency
	//randomly draw n individuals at predefined frequency
	sample(p0.genomes, asInteger(2*Nep0*start_frequency)).addNewDrawnMutation(m1,asInteger(seqLength/2));
	}
1 fitness(m2) {return 1.0;}
1: late() {
	//simplify treeSeq every 200 timesteps
	if (sim.generation%200 == 0){sim.treeSeqSimplify();}}

2 late() {
	sim.addSubpopSplit("p1", Nep1, p0);
	//migration from pop0 to pop1
	p1.setMigrationRates(p0, migration);
	
	}
2: fitness(m1,p0) {return 1.0;}

	

4858 late() {
	sim.treeSeqOutput('sim.trees');
	sim.simulationFinished(); }
